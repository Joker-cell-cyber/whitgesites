'use server';

import { generateUUID } from './utils';
import { UserProfile, Message, WorkoutPlan, NutritionPlan, FitnessArticle, ArticleCategory } from './types/coach';
import { recordGeneration as recordGenerationStats } from './stats-service';
import { TOKEN_COST_CHAT_MESSAGE } from './constants';
import OpenAI from 'openai';
import type { WorkoutDay, Exercise, WorkoutType } from './types/coach';

// Cat√©gories d'articles de fitness
const ARTICLE_CATEGORIES = [
  "Musculation",
  "Cardio",
  "Perte de poids",
  "Prise de masse",
  "Nutrition sportive",
  "R√©cup√©ration",
  "Suppl√©ments",
  "Entra√Ænement fonctionnel"
];

// Initialiser le client OpenAI avec la cl√© API
const openai = new OpenAI({
  apiKey: "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",
});

// Mod√®le √† utiliser - GPT-4o mini au lieu de GPT-4o pour r√©duire les co√ªts
const MODEL = "gpt-4o-mini";

// Prompts syst√®me pour diff√©rents contextes
const COACH_SYSTEM_PROMPT = `Tu es un coach de fitness et nutrition professionnel nomm√© NeuraCoach, sp√©cialis√© dans l'aide aux personnes souhaitant am√©liorer leur condition physique, leur alimentation et leur sant√© globale. 

Basez vos conseils sur les meilleures pratiques scientifiques et ajustez-les en fonction des informations que l'utilisateur vous a fournies sur son profil (√¢ge, sexe, poids, objectifs, etc.).

Soyez positif, motivant mais r√©aliste. Ne donnez jamais de conseils qui pourraient √™tre dangereux pour la sant√©.

Concernant la musculation:
- Adaptez les exercices au niveau de l'utilisateur (d√©butant, interm√©diaire, avanc√©)
- Mettez l'accent sur la bonne forme plut√¥t que sur les poids lourds
- Sugg√©rez des progressions adapt√©es
- Soyez conscient des limites et contre-indications m√©dicales

Concernant la nutrition:
- Donnez des conseils personnalis√©s bas√©s sur les objectifs (perte de poids, prise de masse, performance)
- Respectez les pr√©f√©rences alimentaires et restrictions mentionn√©es
- Expliquez le r√¥le des macronutriments
- Proposez des alternatives pour les allergies/intol√©rances

Vos r√©ponses doivent √™tre:
- Personnalis√©es
- Pr√©cises mais accessibles
- Structur√©es et faciles √† suivre
- R√©alistes et applicables au quotidien

Limitez-vous aux conseils de fitness et nutrition. Pr√©cisez que vous n'√™tes pas un m√©decin quand les questions sortent de votre domaine d'expertise.`;

/**
 * G√©n√®re un message de bienvenue pour le coach IA
 */
export async function generateWelcomeMessage(): Promise<Message> {
  // Simuler un d√©lai d'API
  await new Promise(resolve => setTimeout(resolve, 500));
  
  return {
    id: generateUUID(),
    role: 'assistant',
    content: `# Bienvenue sur votre coach fitness et nutrition personnel üëã

Je suis votre coach IA sp√©cialis√© en fitness et nutrition. Je peux vous aider avec:

- Des programmes d'entra√Ænement personnalis√©s
- Des conseils nutritionnels bas√©s sur la science
- Des recommandations adapt√©es √† votre profil et vos objectifs
- Des explications sur les techniques d'exercices
- Des conseils pour optimiser votre r√©cup√©ration

**Que puis-je faire pour vous aujourd'hui?**`,
    timestamp: new Date().toISOString()
  };
}

/**
 * Cr√©e une nouvelle conversation avec le coach IA
 */
export async function createConversation(userId: string): Promise<string> {
  // Simuler un d√©lai d'API
  await new Promise(resolve => setTimeout(resolve, 500));
  
  // Retourner un ID de conversation
  return generateUUID();
}

/**
 * Envoie un message au coach IA et retourne sa r√©ponse
 */
export async function sendMessageToCoach(
  message: string,
  conversationId?: string,
  userProfile?: UserProfile
): Promise<Message> {
  // Simuler un d√©lai d'API
  await new Promise(resolve => setTimeout(resolve, 1500));
  
  // En pratique, ce serait un appel √† une API externe
  const response: Message = {
    id: generateUUID(),
    role: 'assistant',
    content: `Merci pour votre message. Voici une r√©ponse personnalis√©e bas√©e sur votre profil.

Bas√© sur votre niveau de fitness ${userProfile?.fitnessLevel || 'interm√©diaire'} et vos objectifs ${userProfile?.fitnessGoals?.join(', ') || 'de remise en forme'}, je recommande de...

Une √©tude publi√©e dans le Journal of Strength and Conditioning Research (2019) montre que...

N'h√©sitez pas √† me poser des questions plus sp√©cifiques sur votre entra√Ænement ou votre alimentation!`,
    timestamp: new Date().toISOString()
  };
  
  return response;
}

/**
 * G√©n√®re un programme d'entra√Ænement personnalis√© en utilisant l'IA
 */
export async function generateWorkoutPlan(
  userId: string,
  type: string,
  duration: number,
  frequency: number,
  focusAreas: string[],
  fitnessLevel: string,
  limitations: string[],
  userProfile?: any
): Promise<WorkoutPlan> {
  try {
    const tokenCost = 10; // Co√ªt augment√© pour la g√©n√©ration d'un programme IA avanc√©
    
    // Enregistrer la g√©n√©ration dans les statistiques si possible
    try {
      await recordGenerationStats(userId, tokenCost, 'WORKOUT_PLAN', 'G√©n√©ration programme entra√Ænement');
    } catch (error) {
      console.log('Erreur enregistrement stats, continuons quand m√™me...');
    }
    
    // Construire un prompt d√©taill√© pour l'IA
    const systemPrompt = `Tu es NeuraCoach, un coach de fitness professionnel avec une expertise en pr√©paration physique de haut niveau, sciences du sport et anatomie fonctionnelle.

Tu dois cr√©er un programme d'entra√Ænement personnalis√© d√©taill√©, fond√© sur des principes scientifiques et l'anatomie humaine. 

Voici quelques principes cl√©s √† utiliser:
- Sp√©cificit√©: Le programme doit cibler pr√©cis√©ment les objectifs de l'utilisateur
- Surcharge progressive: Pr√©voir une progression adapt√©e au niveau et aux capacit√©s
- P√©riodisation: Structurer le programme pour √©viter les plateaux et optimiser les gains
- R√©cup√©ration: Inclure des temps de repos adapt√©s entre les s√©ances pour les groupes musculaires
- Technique correcte: D√©crire pr√©cis√©ment l'ex√©cution des mouvements avec points d'attention
- Adaptation physiologique: Consid√©rer les facteurs biologiques individuels

Ta r√©ponse doit √™tre compl√®te, d√©taill√©e et structur√©e. Au lieu de donner des conseils g√©n√©riques, fonde ton programme sur les donn√©es scientifiques les plus r√©centes en musculation et physiologie de l'exercice.`;

    const userPrompt = `Je souhaite un programme d'entra√Ænement parfaitement adapt√© √† mon profil. Voici mes informations:

Type d'entra√Ænement souhait√©: ${type}
Dur√©e du programme: ${duration} semaines
Fr√©quence: ${frequency} s√©ances par semaine
Niveau: ${fitnessLevel}
Groupes musculaires √† cibler: ${focusAreas.join(', ')}
Limitations/contraintes: ${limitations.length > 0 ? limitations.join(', ') : 'Aucune'}

INFORMATIONS PERSONNELLES D√âTAILL√âES:
${userProfile ? `
- √Çge: ${userProfile.age || 'Non sp√©cifi√©'}
- Genre: ${userProfile.gender || 'Non sp√©cifi√©'}
- Poids: ${userProfile.weight || 'Non sp√©cifi√©'} kg
- Taille: ${userProfile.height || 'Non sp√©cifi√©'} cm
- Morphotype: ${userProfile.bodyType || 'Non sp√©cifi√©'}
- Exp√©rience en musculation: ${userProfile.trainingExperience || 'Non sp√©cifi√©'}
- Historique de blessures: ${userProfile.injuryHistory?.length > 0 ? userProfile.injuryHistory.join(', ') : 'Aucune'}
- Performances actuelles:
  * Squat: ${userProfile.strengthLevels?.squat || 0} kg
  * D√©velopp√© couch√©: ${userProfile.strengthLevels?.bench || 0} kg
  * Soulev√© de terre: ${userProfile.strengthLevels?.deadlift || 0} kg
  * D√©velopp√© √©paules: ${userProfile.strengthLevels?.overhead_press || 0} kg
  * Tractions: ${userProfile.strengthLevels?.pullups || 0}
- Acc√®s √† l'√©quipement: ${userProfile.equipmentAccess?.length > 0 ? userProfile.equipmentAccess.join(', ') : 'Non sp√©cifi√©'}
- Pr√©f√©rences d'entra√Ænement: ${userProfile.trainingPreferences?.length > 0 ? userProfile.trainingPreferences.join(', ') : 'Non sp√©cifi√©'}
- Objectifs sp√©cifiques: ${userProfile.specificGoals || 'Non sp√©cifi√©'}
- Dur√©e de s√©ance pr√©f√©r√©e: ${userProfile.sessionDuration || 60} minutes
` : 'Aucune information suppl√©mentaire disponible'}

J'ai besoin d'un programme scientifiquement fond√© et d√©taill√© qui inclut:
1. Un titre pour mon programme
2. Une description g√©n√©rale expliquant la structure et les principes scientifiques utilis√©s
3. Les jours d'entra√Ænement avec noms sp√©cifiques (ex: "Jour 1: Push - Haut du corps")
4. Pour chaque jour, une liste compl√®te d'exercices avec:
   - Nom de l'exercice
   - Nombre de s√©ries
   - Fourchettes de r√©p√©titions ou dur√©e
   - Temps de repos entre les s√©ries
   - Notes techniques pour l'ex√©cution correcte
   - Groupes musculaires cibl√©s
5. Des variations d'exercices si je dois m'adapter √† des contraintes mat√©rielles
6. Des conseils d'√©chauffement et de r√©cup√©ration
7. Un plan de progression sur la dur√©e du programme (${duration} semaines)

FORMAT DE R√âPONSE:
- Structurer clairement avec des sections et sous-sections
- Pour chaque exercice, utiliser ce format:
  * NOM DE L'EXERCICE (muscles cibl√©s)
  * S√©ries: X | R√©p√©titions: Y-Z | Repos: A secondes
  * Notes techniques: [explications d√©taill√©es sur l'ex√©cution correcte]`;

    // Appel √† l'API OpenAI pour g√©n√©rer le programme
    const aiResponse = await openai.chat.completions.create({
      model: MODEL,
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: userPrompt }
      ],
      temperature: 0.7,
      max_tokens: 3500
    });
    
    // Extraire la r√©ponse g√©n√©r√©e
    const generatedContent = aiResponse.choices[0].message.content || '';
    
    // Parsing du programme g√©n√©r√© par l'IA
    const workoutDays = parseWorkoutDaysFromAI(generatedContent, frequency);
    
    // Cr√©er le titre du programme
    const titleMatch = generatedContent.match(/^#\s*(.*?)(?:\n|$)/m);
    const title = titleMatch ? titleMatch[1].trim() : `Programme ${type} de ${duration} semaines`;
    
    // Cr√©er et retourner le plan d'entra√Ænement
    const workoutPlan: WorkoutPlan = {
      id: generateUUID(),
      userId,
      title,
      description: generatedContent,
      type: type as any,
      duration,
      frequency,
      days: [], // On ne garde plus les jours structur√©s
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      tokenCost
    };
    
    return workoutPlan;
    
  } catch (error) {
    console.error('Erreur lors de la g√©n√©ration du programme d\'entra√Ænement:', error);
    throw new Error("Une erreur s'est produite lors de la g√©n√©ration de votre programme d'entra√Ænement.");
  }
}

/**
 * Analyse le contenu g√©n√©r√© par l'IA pour en extraire les jours d'entra√Ænement structur√©s
 */
function parseWorkoutDaysFromAI(content: string, frequency: number): WorkoutDay[] {
  const workoutDays: WorkoutDay[] = [];
  
  // Recherche des sections de jours d'entra√Ænement dans le contenu
  const dayRegex = /(?:jour|day)\s*(\d+)\s*(?::|-)?\s*(.*?)(?:\n|$)/gi;
  let dayMatch;
  
  // Utiliser un ensemble pour suivre les jours d√©j√† trait√©s
  const processedDays = new Set<number>();
  
  while ((dayMatch = dayRegex.exec(content)) !== null) {
    const dayNumber = parseInt(dayMatch[1]);
    
    // √âviter les doublons
    if (processedDays.has(dayNumber)) continue;
    processedDays.add(dayNumber);
    
    // S'assurer que le nombre de jours est coh√©rent avec la fr√©quence
    if (dayNumber > frequency) continue;
    
    const dayName = dayMatch[2].trim();
    
    // Trouver les exercices associ√©s √† ce jour
    const exercises: Exercise[] = extractExercisesForDay(content, dayNumber, dayMatch[0]);
    
    // Ajouter ce jour au programme
    workoutDays.push({
      day: dayNumber,
      name: dayName || `Jour ${dayNumber}`,
      exercises: exercises.length > 0 ? exercises : generateDefaultExercises(dayNumber),
      notes: extractNotesForDay(content, dayNumber, dayMatch[0])
    });
  }
  
  // Si aucun jour n'a √©t√© trouv√© ou pas assez, g√©n√©rer des jours par d√©faut
  if (workoutDays.length < frequency) {
    for (let i = 1; i <= frequency; i++) {
      if (!processedDays.has(i)) {
        workoutDays.push({
          day: i,
          name: `Jour ${i}`,
          exercises: generateDefaultExercises(i),
          notes: "√âchauffement n√©cessaire avant de commencer."
        });
      }
    }
  }
  
  // Trier les jours par num√©ro
  return workoutDays.sort((a, b) => a.day - b.day);
}

/**
 * Extrait les exercices pour un jour sp√©cifique √† partir du contenu g√©n√©r√© par l'IA
 */
function extractExercisesForDay(content: string, dayNumber: number, dayHeader: string): Exercise[] {
  const exercises: Exercise[] = [];
  
  // Trouver la section correspondant au jour sp√©cifique
  const dayContent = extractDayContent(content, dayHeader);
  if (!dayContent) return exercises;
  
  // Chercher des patterns d'exercices dans le contenu du jour
  const exerciseRegex = /(?:[\d\.]+\s+)?(?:\*\s+)?([A-Za-z√Ä-√ø\s\(\)\-‚Äì]+?)(?:\s+\(([^)]+)\))?[\s:]*(?:\n|$)(?:\s*[‚Ä¢*-]\s*(?:S√©ries|Series)?\s*:?\s*(\d+)[\s|x]*(?:R√©p√©titions|Reps)?\s*:?\s*([\/\d-‚Äì+\s]+))?(?:\s*[‚Ä¢*-]\s*(?:Repos|Rest)?\s*:?\s*(\d+)[‚Äì\-\s]*(\d*))?/gim;
  
  let exerciseMatch;
  let position = 0;
  
  while ((exerciseMatch = exerciseRegex.exec(dayContent)) !== null) {
    const exerciseName = exerciseMatch[1].trim();
    
    // Ignorer les lignes qui ne sont probablement pas des exercices
    if (
      exerciseName.toLowerCase().includes('√©chauffement') ||
      exerciseName.toLowerCase().includes('warm') ||
      exerciseName.toLowerCase().includes('cool') ||
      exerciseName.toLowerCase().includes('√©tirement') ||
      exerciseName.toLowerCase().includes('stretch') ||
      exerciseName.toLowerCase().includes('note') ||
      exerciseName.toLowerCase().includes('jour') ||
      exerciseName.toLowerCase().includes('day') ||
      exerciseName.length < 3 ||
      /^s√©ance|semaine|week|session$/i.test(exerciseName)
    ) {
      continue;
    }
    
    const muscleGroups = exerciseMatch[2] 
      ? exerciseMatch[2].split(/[,\/&]/).map(m => m.trim()) 
      : inferMuscleGroups(exerciseName);
    
    const sets = exerciseMatch[3] ? parseInt(exerciseMatch[3]) : 3;
    const reps = exerciseMatch[4] ? exerciseMatch[4].trim() : "8-12";
    const restMin = exerciseMatch[5] ? parseInt(exerciseMatch[5]) : 60;
    const restMax = exerciseMatch[6] && exerciseMatch[6].trim() ? parseInt(exerciseMatch[6]) : restMin;
    
    const restTime = restMax > restMin ? `${restMin}-${restMax} sec` : `${restMin} sec`;
    
    // Extraire des notes √©ventuelles pour cet exercice
    const noteMatch = dayContent.slice(exerciseMatch.index + exerciseMatch[0].length).match(/(?:Notes?|Technique)?\s*:?\s*([^*‚Ä¢\-\n][^\n]+)(?:\n|$)/i);
    const notes = noteMatch ? noteMatch[1].trim() : "Concentrez-vous sur une ex√©cution technique parfaite.";
    
    exercises.push({
      name: exerciseName,
      sets,
      reps,
      restTime,
      notes,
      muscleGroups
    });
    
    position = exerciseMatch.index + exerciseMatch[0].length;
  }
  
  return exercises;
}

/**
 * Extrait le contenu sp√©cifique √† un jour d'entra√Ænement
 */
function extractDayContent(content: string, dayHeader: string): string {
  const dayStart = content.indexOf(dayHeader);
  if (dayStart === -1) return '';
  
  // Chercher la prochaine section qui commence par un heading
  const nextSectionRegex = /\n(?:##|jour|day)/i;
  const match = content.slice(dayStart + dayHeader.length).match(nextSectionRegex);
  
  const endPosition = match && match.index !== undefined
    ? dayStart + dayHeader.length + match.index 
    : content.length;
  
  return content.slice(dayStart, endPosition);
}

/**
 * Extrait les notes associ√©es √† un jour d'entra√Ænement
 */
function extractNotesForDay(content: string, dayNumber: number, dayHeader: string): string {
  const dayContent = extractDayContent(content, dayHeader);
  
  // Chercher des sections de notes
  const notesRegex = /(?:notes?|conseils?|recommandations?)(?:\s*:|\s*\n)([^#]+?)(?=\n\n|\n#|$)/i;
  const match = dayContent.match(notesRegex);
  
  if (match) {
    return match[1].trim();
  }
  
  return "√âchauffez-vous correctement avant chaque s√©ance et restez hydrat√© pendant l'entra√Ænement.";
}

/**
 * D√©termine les groupes musculaires cibl√©s √† partir du nom de l'exercice
 */
function inferMuscleGroups(exerciseName: string): string[] {
  const exerciseLower = exerciseName.toLowerCase();
  
  // Mapping des mots-cl√©s aux groupes musculaires
  const muscleMap: Record<string, string[]> = {
    'squat': ['Quadriceps', 'Fessiers'],
    'presse': ['Quadriceps', 'Fessiers'],
    'leg press': ['Quadriceps', 'Fessiers'],
    'leg extension': ['Quadriceps'],
    'soulev√© de terre': ['Dos', 'Fessiers', 'Ischio-jambiers'],
    'deadlift': ['Dos', 'Fessiers', 'Ischio-jambiers'],
    'soulev√©': ['Dos', 'Fessiers'],
    'rowing': ['Dos'],
    'row': ['Dos'],
    'traction': ['Dos', 'Biceps'],
    'pull-up': ['Dos', 'Biceps'],
    'chin-up': ['Dos', 'Biceps'],
    'pull down': ['Dos', 'Biceps'],
    'curl': ['Biceps'],
    'biceps': ['Biceps'],
    'triceps': ['Triceps'],
    'extension': ['Triceps'],
    'bench': ['Pectoraux', 'Triceps'],
    'd√©velopp√©': ['Pectoraux', 'Triceps', '√âpaules'],
    'press': ['Pectoraux', 'Triceps', '√âpaules'],
    'pec': ['Pectoraux'],
    'chest': ['Pectoraux'],
    'fly': ['Pectoraux'],
    'butterfly': ['Pectoraux'],
    'shoulder': ['√âpaules'],
    '√©paule': ['√âpaules'],
    'deltoid': ['√âpaules'],
    'leg curl': ['Ischio-jambiers'],
    'hamstring': ['Ischio-jambiers'],
    'ischio': ['Ischio-jambiers'],
    'abdo': ['Abdominaux'],
    'abs': ['Abdominaux'],
    'crunch': ['Abdominaux'],
    'plank': ['Abdominaux', 'Core'],
    'hip thrust': ['Fessiers'],
    'glute': ['Fessiers'],
    'fessier': ['Fessiers'],
    'calf': ['Mollets'],
    'mollet': ['Mollets'],
    'shrug': ['Trap√®zes'],
    'trap': ['Trap√®zes'],
    'pushup': ['Pectoraux', 'Triceps'],
    'push-up': ['Pectoraux', 'Triceps'],
    'pompe': ['Pectoraux', 'Triceps'],
    'dips': ['Pectoraux', 'Triceps'],
    'lunge': ['Quadriceps', 'Fessiers'],
    'fente': ['Quadriceps', 'Fessiers'],
  };
  
  // Recherche des correspondances
  for (const [keyword, muscles] of Object.entries(muscleMap)) {
    if (exerciseLower.includes(keyword)) {
      return muscles;
    }
  }
  
  // Cas par d√©faut
  return ['Groupe musculaire non sp√©cifi√©'];
}

/**
 * G√©n√®re des exercices par d√©faut au cas o√π l'IA n'en fournirait pas
 */
function generateDefaultExercises(dayNumber: number): Exercise[] {
  // D√©finition des exercices par d√©faut selon le jour
  const defaultExercises: Record<number, Exercise[]> = {
    1: [ // Jour 1: Haut du corps - Push
      {
        name: "D√©velopp√© couch√© avec halt√®res",
        sets: 4,
        reps: "8-10",
        restTime: "90 sec",
        notes: "Gardez les coudes √† 45¬∞ par rapport au corps pour prot√©ger vos √©paules.",
        muscleGroups: ["Pectoraux", "Triceps", "√âpaules"]
      },
      {
        name: "D√©velopp√© militaire",
        sets: 3,
        reps: "10-12",
        restTime: "60 sec",
        notes: "Gardez le dos bien droit et engagez les abdominaux.",
        muscleGroups: ["√âpaules", "Triceps"]
      },
      {
        name: "Extension des triceps √† la poulie haute",
        sets: 3,
        reps: "12-15",
        restTime: "60 sec",
        notes: "Gardez les coudes bien serr√©s contre la t√™te.",
        muscleGroups: ["Triceps"]
      }
    ],
    2: [ // Jour 2: Bas du corps
      {
        name: "Squat",
        sets: 4,
        reps: "8-10",
        restTime: "120 sec",
        notes: "Descendez jusqu'√† ce que vos cuisses soient parall√®les au sol.",
        muscleGroups: ["Quadriceps", "Fessiers", "Ischio-jambiers"]
      },
      {
        name: "Soulev√© de terre roumain",
        sets: 3,
        reps: "10-12",
        restTime: "90 sec",
        notes: "Gardez le dos droit et les genoux l√©g√®rement fl√©chis.",
        muscleGroups: ["Ischio-jambiers", "Fessiers", "Bas du dos"]
      },
      {
        name: "Extension des jambes",
        sets: 3,
        reps: "12-15",
        restTime: "60 sec",
        notes: "Concentrez-vous sur la contraction du quadriceps.",
        muscleGroups: ["Quadriceps"]
      }
    ],
    3: [ // Jour 3: Haut du corps - Pull
      {
        name: "Rowing halt√®re",
        sets: 4,
        reps: "8-10",
        restTime: "90 sec",
        notes: "Tirez votre coude vers l'arri√®re et serrez l'omoplate √† la fin du mouvement.",
        muscleGroups: ["Dos", "Biceps"]
      },
      {
        name: "Traction assist√©e",
        sets: 3,
        reps: "8-10",
        restTime: "90 sec",
        notes: "Tirez avec les coudes, pas avec les bras.",
        muscleGroups: ["Dos", "Biceps"]
      },
      {
        name: "Curl biceps",
        sets: 3,
        reps: "12-15",
        restTime: "60 sec",
        notes: "√âvitez de balancer le corps pendant le mouvement.",
        muscleGroups: ["Biceps"]
      }
    ],
    4: [ // Jour 4: Full body
      {
        name: "Squat goblet",
        sets: 3,
        reps: "12-15",
        restTime: "60 sec",
        notes: "Gardez le dos droit et les talons au sol.",
        muscleGroups: ["Quadriceps", "Fessiers"]
      },
      {
        name: "D√©velopp√© halt√®res inclin√©",
        sets: 3,
        reps: "10-12",
        restTime: "60 sec",
        notes: "Contr√¥lez la descente pour maximiser la tension musculaire.",
        muscleGroups: ["Pectoraux", "Triceps", "√âpaules"]
      },
      {
        name: "Rowing barre T",
        sets: 3,
        reps: "10-12",
        restTime: "60 sec",
        notes: "Tirez la barre vers le nombril et serrez les omoplates.",
        muscleGroups: ["Dos", "Biceps"]
      }
    ],
    5: [ // Jour 5: Haut du corps
      {
        name: "Dips",
        sets: 3,
        reps: "8-10",
        restTime: "90 sec",
        notes: "Descendez jusqu'√† ce que vos coudes forment un angle de 90¬∞.",
        muscleGroups: ["Pectoraux", "Triceps"]
      },
      {
        name: "√âl√©vations lat√©rales",
        sets: 3,
        reps: "12-15",
        restTime: "60 sec",
        notes: "Gardez une l√©g√®re flexion des coudes tout au long du mouvement.",
        muscleGroups: ["√âpaules"]
      },
      {
        name: "Pullover avec halt√®re",
        sets: 3,
        reps: "12-15",
        restTime: "60 sec",
        notes: "√âtendez bien les bras pour sentir l'√©tirement dans les dorsaux.",
        muscleGroups: ["Dos", "Pectoraux"]
      }
    ],
    6: [ // Jour 6: Bas du corps
      {
        name: "Fentes avec halt√®res",
        sets: 3,
        reps: "10-12 par jambe",
        restTime: "60 sec",
        notes: "Gardez le torse droit pendant tout le mouvement.",
        muscleGroups: ["Quadriceps", "Fessiers", "Ischio-jambiers"]
      },
      {
        name: "Hip thrust",
        sets: 3,
        reps: "12-15",
        restTime: "60 sec",
        notes: "Contractez bien les fessiers au sommet du mouvement.",
        muscleGroups: ["Fessiers", "Ischio-jambiers"]
      },
      {
        name: "√âl√©vation des mollets debout",
        sets: 3,
        reps: "15-20",
        restTime: "60 sec",
        notes: "Montez le plus haut possible sur la pointe des pieds.",
        muscleGroups: ["Mollets"]
      }
    ],
    7: [ // Jour 7: R√©cup√©ration active ou repos
      {
        name: "Marche ou v√©lo √† faible intensit√©",
        sets: 1,
        reps: "20-30 min",
        restTime: "N/A",
        notes: "Gardez une intensit√© faible, l'objectif est la r√©cup√©ration active.",
        muscleGroups: ["Syst√®me cardiovasculaire"]
      },
      {
        name: "√âtirements g√©n√©raux",
        sets: 1,
        reps: "15-20 min",
        restTime: "N/A",
        notes: "Maintenez chaque √©tirement 30 secondes sans rebondir.",
        muscleGroups: ["Tous les groupes musculaires"]
      }
    ]
  };
  
  // Si le jour existe dans notre mapping, retourner les exercices correspondants
  if (defaultExercises[dayNumber]) {
    return defaultExercises[dayNumber];
  }
  
  // Sinon retourner les exercices du jour 1 par d√©faut
  return defaultExercises[1];
}

/**
 * G√©n√®re un plan nutritionnel personnalis√©
 */
export async function generateNutritionPlan(
  userId: string,
  goal: string,
  calorieTarget: number,
  dietaryPreferences: string[],
  allergies: string[],
  mealCount: number
): Promise<NutritionPlan> {
  try {
    // Simuler un d√©lai d'API
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const tokenCost = 5; // Co√ªt fixe pour la g√©n√©ration d'un plan nutritionnel
    
    // Enregistrer la g√©n√©ration dans les statistiques si possible
    try {
      await recordGenerationStats(userId, tokenCost, 'NUTRITION_PLAN', 'G√©n√©ration plan nutritionnel');
    } catch (error) {
      console.log('Erreur enregistrement stats, continuons quand m√™me...');
    }
    
    // Calculer une r√©partition de macros bas√©e sur l'objectif
    let protein = 0, carbs = 0, fat = 0;
    
    if (goal.includes('perte de poids')) {
      // R√©partition pour perte de poids: 40% prot√©ines, 30% glucides, 30% lipides
      protein = Math.round((calorieTarget * 0.4) / 4); // 4 calories par gramme de prot√©ine
      carbs = Math.round((calorieTarget * 0.3) / 4); // 4 calories par gramme de glucides
      fat = Math.round((calorieTarget * 0.3) / 9); // 9 calories par gramme de lipides
    } else if (goal.includes('prise de masse')) {
      // R√©partition pour prise de masse: 30% prot√©ines, 50% glucides, 20% lipides
      protein = Math.round((calorieTarget * 0.3) / 4);
      carbs = Math.round((calorieTarget * 0.5) / 4);
      fat = Math.round((calorieTarget * 0.2) / 9);
    } else {
      // R√©partition √©quilibr√©e: 30% prot√©ines, 40% glucides, 30% lipides
      protein = Math.round((calorieTarget * 0.3) / 4);
      carbs = Math.round((calorieTarget * 0.4) / 4);
      fat = Math.round((calorieTarget * 0.3) / 9);
    }
    
    // Cr√©er un contenu de plan nutritionnel simul√©
    const planContent = `# Plan nutritionnel pour ${goal}

## Objectif
Ce plan est con√ßu pour vous aider √† ${goal}.

## Cibles nutritionnelles
- Calories: ${calorieTarget} kcal par jour
- Prot√©ines: ${protein}g (${Math.round((protein * 4 / calorieTarget) * 100)}% des calories)
- Glucides: ${carbs}g (${Math.round((carbs * 4 / calorieTarget) * 100)}% des calories)
- Lipides: ${fat}g (${Math.round((fat * 9 / calorieTarget) * 100)}% des calories)

## Pr√©f√©rences alimentaires prises en compte
${dietaryPreferences.length > 0 ? dietaryPreferences.join(', ') : 'Aucune pr√©f√©rence sp√©cifi√©e'}.

## Allergies/Intol√©rances prises en compte
${allergies.length > 0 ? allergies.join(', ') : 'Aucune allergie sp√©cifi√©e'}.

## Plan de repas sur 7 jours

${generateMealPlanContent(mealCount, goal, dietaryPreferences)}

## Conseils
- Buvez au moins 2L d'eau par jour
- Privil√©giez les aliments entiers et non transform√©s
- Pr√©parez vos repas √† l'avance pour √©viter les √©carts
- Ajustez les portions en fonction de votre faim et de vos besoins`;

    // Cr√©er des plans de repas simul√©s pour 7 jours
    const mealPlans = [];
    for (let day = 1; day <= 7; day++) {
      const meals = [];
      let dailyCalories = 0;
      let dailyProtein = 0;
      let dailyCarbs = 0;
      let dailyFat = 0;
      
      for (let meal = 1; meal <= mealCount; meal++) {
        // Calculer des valeurs nutritionnelles approximatives pour chaque repas
        const mealCalories = Math.round(calorieTarget / mealCount);
        const mealProtein = Math.round(protein / mealCount);
        const mealCarbs = Math.round(carbs / mealCount);
        const mealFat = Math.round(fat / mealCount);
        
        dailyCalories += mealCalories;
        dailyProtein += mealProtein;
        dailyCarbs += mealCarbs;
        dailyFat += mealFat;
        
        meals.push({
          name: getMealName(meal, mealCount),
          description: getMealDescription(meal, goal, dietaryPreferences),
          foods: getMealFoods(meal, goal, dietaryPreferences, allergies),
          calories: mealCalories,
          protein: mealProtein,
          carbs: mealCarbs,
          fat: mealFat
        });
      }
      
      mealPlans.push({
        day,
        meals
      });
    }
    
    // Cr√©er et retourner le plan nutritionnel
    const nutritionPlan: NutritionPlan = {
      id: generateUUID(),
      userId,
      title: `Plan nutritionnel pour ${goal}`,
      description: planContent,
      calorieTarget,
      macros: {
        protein,
        carbs,
        fat
      },
      mealPlans,
      notes: "Adapt√© √† vos pr√©f√©rences et objectifs personnels. Ajustez les quantit√©s selon vos besoins.",
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      tokenCost
    };
    
    return nutritionPlan;
    
  } catch (error) {
    console.error('Erreur lors de la g√©n√©ration du plan nutritionnel:', error);
    throw new Error("Une erreur s'est produite lors de la g√©n√©ration de votre plan nutritionnel.");
  }
}

// Fonctions utilitaires pour g√©n√©rer du contenu simul√©

function getDayName(dayNumber: number, type: string, focusAreas: string[]): string {
  if (focusAreas.includes('jambes') && dayNumber === 1) return 'Jour des Jambes';
  if (focusAreas.includes('dos') && dayNumber === 2) return 'Jour du Dos';
  if (focusAreas.includes('poitrine') && dayNumber === 3) return 'Jour de la Poitrine';
  if (focusAreas.includes('bras') && dayNumber === 4) return 'Jour des Bras';
  if (focusAreas.includes('√©paules') && dayNumber === 5) return 'Jour des √âpaules';
  
  const days = [
    'Push (Pousser)',
    'Pull (Tirer)',
    'Jambes',
    'Haut du Corps',
    'Bas du Corps',
    'Full Body',
    'Cardio & R√©cup√©ration'
  ];
  
  return days[(dayNumber - 1) % days.length];
}

function generateExercisesForDay(dayNumber: number, type: string, focusAreas: string[]): any[] {
  const exercises = [];
  
  // Nombre d'exercices bas√© sur le type
  const numExercises = type === 'force' ? 5 : type === 'hypertrophie' ? 8 : 6;
  
  for (let i = 1; i <= numExercises; i++) {
    let exerciseName = '';
    let muscleGroups = [];
    
    if (dayNumber === 1) {
      // Jour 1: Jambes/Push
      exerciseName = ['Squat', 'Presse √† cuisses', 'Extension des jambes', 'Curl des ischio-jambiers', 'Fentes', '√âl√©vation des mollets'][i % 6];
      muscleGroups = ['quadriceps', 'ischio-jambiers', 'fessiers', 'mollets'];
    } else if (dayNumber === 2) {
      // Jour 2: Dos/Pull
      exerciseName = ['Tractions', 'Rowing halt√®re', 'Tirage vertical', 'Pull-over', 'Rowing T-bar', 'Curl biceps'][i % 6];
      muscleGroups = ['dos', 'trap√®zes', 'biceps', 'avant-bras'];
    } else if (dayNumber === 3) {
      // Jour 3: Poitrine/Push
      exerciseName = ['D√©velopp√© couch√©', '√âcart√© √† la poulie', 'D√©velopp√© inclin√©', 'Dips', 'Extension des triceps', 'Push-ups'][i % 6];
      muscleGroups = ['pectoraux', 'triceps', '√©paules ant√©rieures'];
    } else {
      // Autres jours: Full body/Mix
      exerciseName = ['Soulev√© de terre', 'D√©velopp√© militaire', 'Rowing', 'Fentes', 'Crunch', 'Planche', 'Mountain climber', 'Burpees'][i % 8];
      muscleGroups = ['full body', 'core'];
    }
    
    exercises.push({
      name: exerciseName,
      sets: type === 'force' ? 5 : type === 'hypertrophie' ? 4 : 3,
      reps: type === 'force' ? '3-5' : type === 'hypertrophie' ? '8-12' : '12-15',
      restTime: type === 'force' ? '3-5 minutes' : type === 'hypertrophie' ? '60-90 secondes' : '30-60 secondes',
      notes: `Concentrez-vous sur la technique. ${type === 'force' ? 'Utilisez des charges lourdes.' : type === 'hypertrophie' ? 'Contraction musculaire maximale.' : 'Gardez un bon rythme.'}`,
      muscleGroups
    });
  }
  
  return exercises;
}

function generateWorkoutDaysContent(frequency: number, type: string, focusAreas: string[]): string {
  let content = '';
  
  for (let i = 1; i <= frequency; i++) {
    content += `### Jour ${i}: ${getDayName(i, type, focusAreas)}\n\n`;
    
    const exercises = generateExercisesForDay(i, type, focusAreas);
    exercises.forEach(exercise => {
      content += `- **${exercise.name}**: ${exercise.sets} s√©ries x ${exercise.reps} r√©p√©titions, r√©cup√©ration ${exercise.restTime}\n`;
    });
    
    content += '\n';
  }
  
  return content;
}

function getMealName(mealNumber: number, totalMeals: number): string {
  if (totalMeals <= 3) {
    return ['Petit-d√©jeuner', 'D√©jeuner', 'D√Æner'][mealNumber - 1] || `Repas ${mealNumber}`;
  } else {
    if (mealNumber === 1) return 'Petit-d√©jeuner';
    if (mealNumber === Math.ceil(totalMeals / 2)) return 'D√©jeuner';
    if (mealNumber === totalMeals) return 'D√Æner';
    return `Collation ${mealNumber < Math.ceil(totalMeals / 2) ? 'matinale' : 'apr√®s-midi'}`;
  }
}

function getMealDescription(mealNumber: number, goal: string, preferences: string[]): string {
  const mealType = getMealName(mealNumber, 5);
  
  if (mealType.includes('Petit-d√©jeuner')) {
    return `Un petit-d√©jeuner ${goal.includes('perte') ? 'prot√©in√© et l√©ger' : 'complet et √©nerg√©tique'} pour bien d√©marrer la journ√©e.`;
  }
  
  if (mealType.includes('D√©jeuner')) {
    return `Un d√©jeuner √©quilibr√© riche en ${goal.includes('perte') ? 'prot√©ines et fibres' : 'nutriments essentiels'} pour soutenir votre activit√©.`;
  }
  
  if (mealType.includes('D√Æner')) {
    return `Un d√Æner ${goal.includes('perte') ? 'l√©ger' : 'reconstituant'} pour favoriser ${goal.includes('perte') ? 'la r√©cup√©ration nocturne' : 'la synth√®se musculaire pendant le sommeil'}.`;
  }
  
  return `Une collation pour maintenir votre √©nergie et ${goal.includes('perte') ? '√©viter les fringales' : 'soutenir votre m√©tabolisme'}.`;
}

function getMealFoods(mealNumber: number, goal: string, preferences: string[], allergies: string[]): string[] {
  const isVegetarian = preferences.some(p => p.toLowerCase().includes('v√©g√©'));
  const isVegan = preferences.some(p => p.toLowerCase().includes('vegan'));
  
  // Aliments de base selon les pr√©f√©rences
  let proteins = isVegan ? 
    ['tofu', 'tempeh', 'seitan', 'l√©gumineuses', 'prot√©ines de pois'] :
    isVegetarian ?
    ['≈ìufs', 'fromage blanc', 'tofu', 'l√©gumineuses', 'yaourt grec'] :
    ['poulet', '≈ìufs', 'thon', 'saumon', 'fromage blanc', 'b≈ìuf maigre'];
  
  let carbs = ['riz complet', 'patate douce', 'quinoa', 'avoine', 'pain complet'];
  let fats = ['avocat', 'huile d\'olive', 'amandes', 'noix', 'graines de chia'];
  let veggies = ['√©pinards', 'brocoli', 'poivrons', 'tomates', 'concombre'];
  let fruits = ['banane', 'myrtilles', 'pomme', 'fraises', 'oranges'];
  
  // Filtrer les allerg√®nes
  if (allergies.length > 0) {
    const allergyTerms = allergies.map(a => a.toLowerCase());
    
    // Filtrer les prot√©ines
    proteins = proteins.filter(p => !allergyTerms.some(a => p.includes(a)));
    
    // Filtrer les glucides
    carbs = carbs.filter(c => !allergyTerms.some(a => c.includes(a)));
    
    // Filtrer les lipides
    fats = fats.filter(f => !allergyTerms.some(a => f.includes(a)));
    
    // Filtrer les l√©gumes
    veggies = veggies.filter(v => !allergyTerms.some(a => v.includes(a)));
    
    // Filtrer les fruits
    fruits = fruits.filter(f => !allergyTerms.some(a => f.includes(a)));
  }
  
  // S√©lectionner des aliments selon le repas
  let foods: string[] = [];
  const mealType = getMealName(mealNumber, 5);
  
  if (mealType.includes('Petit-d√©jeuner')) {
    foods = [
      `${proteins[Math.floor(Math.random() * proteins.length)]}`,
      `${carbs[Math.floor(Math.random() * carbs.length)]}`,
      `${fruits[Math.floor(Math.random() * fruits.length)]}`
    ];
  } else if (mealType.includes('D√©jeuner') || mealType.includes('D√Æner')) {
    foods = [
      `${proteins[Math.floor(Math.random() * proteins.length)]}`,
      `${carbs[Math.floor(Math.random() * carbs.length)]}`,
      `${veggies[Math.floor(Math.random() * veggies.length)]}`,
      `${fats[Math.floor(Math.random() * fats.length)]}`
    ];
  } else {
    // Collation
    foods = [
      `${proteins[Math.floor(Math.random() * proteins.length)]}`,
      `${fruits[Math.floor(Math.random() * fruits.length)]}`
    ];
  }
  
  return foods;
}

function generateMealPlanContent(mealCount: number, goal: string, preferences: string[]): string {
  let content = '';
  
  for (let day = 1; day <= 3; day++) {
    content += `### Jour ${day}\n\n`;
    
    for (let meal = 1; meal <= mealCount; meal++) {
      const mealName = getMealName(meal, mealCount);
      content += `#### ${mealName}\n\n`;
      content += `${getMealDescription(meal, goal, preferences)}\n\n`;
      
      const foods = getMealFoods(meal, goal, preferences, []);
      content += '**Aliments sugg√©r√©s**:\n';
      foods.forEach(food => {
        content += `- ${food}\n`;
      });
      
      content += '\n';
    }
    
    content += '---\n\n';
  }
  
  content += '...\n\n_Voir plan complet pour les autres jours_';
  
  return content;
}

/**
 * G√©n√®re un article sur la fitness et la nutrition
 */
export async function generateFitnessArticle(
  userId: string,
  title: string,
  category: string,
  keywords: string[],
  wordCount: number
): Promise<FitnessArticle> {
  try {
    // V√©rifier que la cat√©gorie est valide
    if (!ARTICLE_CATEGORIES.includes(category)) {
      throw new Error("Cat√©gorie d'article invalide");
    }
    
    // Simuler un d√©lai d'API
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const tokenCost = 3; // Co√ªt fixe pour la g√©n√©ration d'un article
    
    // Enregistrer la g√©n√©ration dans les statistiques si possible
    try {
      await recordGenerationStats(userId, tokenCost, 'ARTICLE', 'G√©n√©ration article fitness');
    } catch (error) {
      console.log('Erreur enregistrement stats, continuons quand m√™me...');
    }
    
    // G√©n√©ration de contenu d'article simul√©
    const articleContent = `# ${title}

## Introduction

${title} est un sujet essentiel pour toute personne int√©ress√©e par le fitness et la nutrition. Dans cet article, nous allons explorer comment optimiser vos r√©sultats en mettant en pratique les derni√®res recherches scientifiques.

## Les bases

Les fondamentaux de ${keywords[0] || 'la fitness'} comprennent une alimentation √©quilibr√©e, un entra√Ænement r√©gulier, et une r√©cup√©ration ad√©quate. Les √©tudes r√©centes montrent que la coh√©rence est le facteur le plus important pour atteindre vos objectifs.

## Techniques avanc√©es

Pour aller plus loin dans ${keywords[1] || 'votre progression'}, consid√©rez ces approches scientifiquement valid√©es:

1. **P√©riodisation de l'entra√Ænement**: Variez l'intensit√© et le volume pour continuer √† progresser
2. **Nutrition cibl√©e**: Adaptez votre alimentation √† vos phases d'entra√Ænement
3. **R√©cup√©ration optimis√©e**: Utilisez des techniques comme la compression, le contraste thermique et la m√©ditation

## Comment appliquer ces principes

La cl√© est d'adapter ces conseils √† votre situation personnelle, en tenant compte de votre niveau actuel, vos objectifs et vos contraintes de temps.

## Conclusion

En int√©grant ces strat√©gies bas√©es sur la science dans votre routine, vous pourrez maximiser vos r√©sultats et atteindre vos objectifs plus efficacement.

---

*Cet article a √©t√© g√©n√©r√© pour la cat√©gorie ${category} avec les mots-cl√©s: ${keywords.join(', ')}.*`;

    // Calculer des statistiques approximatives sur l'article
    const words = articleContent.split(/\s+/).length;
    const readingTime = Math.ceil(words / 200); // Estimation : 200 mots par minute
    
    // G√©n√©rer un r√©sum√© de l'article (simul√©)
    const summary = `D√©couvrez les meilleures pratiques pour optimiser vos r√©sultats en ${keywords[0] || 'fitness'} gr√¢ce aux derni√®res recherches scientifiques. Cet article pratique vous guide √† travers les techniques essentielles et avanc√©es pour atteindre vos objectifs plus rapidement.`;
    
    // Cr√©er et retourner l'article
    const fitnessArticle: FitnessArticle = {
      id: generateUUID(),
      userId,
      title,
      summary,
      content: articleContent,
      category: category as ArticleCategory,
      wordCount: words,
      readingTime,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      tokenCost
    };
    
    return fitnessArticle;
    
  } catch (error) {
    console.error('Erreur lors de la g√©n√©ration de l\'article:', error);
    throw new Error("Une erreur s'est produite lors de la g√©n√©ration de votre article.");
  }
}

/**
 * Fonction utilitaire pour enregistrer la g√©n√©ration dans les statistiques
 */
async function recordGenerationClient(
  userId: string,
  tokenCost: number,
  contentType: 'CHAT_MESSAGE' | 'WORKOUT_PLAN' | 'NUTRITION_PLAN' | 'ARTICLE',
  description: string
) {
  try {
    const response = await fetch('/api/record-generation', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        userId,
        tokenCost,
        contentType,
        description
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || 'Erreur lors de l\'enregistrement de la g√©n√©ration');
    }

    return await response.json();
  } catch (error) {
    console.error('Erreur lors de l\'enregistrement de la g√©n√©ration:', error);
    throw error;
  }
}

async function recordChatMessageGeneration(userId: string, tokenCost: number = 1) {
  return recordGenerationClient(userId, tokenCost, 'CHAT_MESSAGE', 'Message coach IA');
}

async function recordWorkoutPlanGeneration(userId: string, tokenCost: number = 5) {
  return recordGenerationClient(userId, tokenCost, 'WORKOUT_PLAN', 'G√©n√©ration programme entra√Ænement');
}

async function recordNutritionPlanGeneration(userId: string, tokenCost: number = 5) {
  return recordGenerationClient(userId, tokenCost, 'NUTRITION_PLAN', 'G√©n√©ration plan nutritionnel');
}

async function recordArticleGeneration(userId: string, tokenCost: number = 3) {
  return recordGenerationClient(userId, tokenCost, 'ARTICLE', 'G√©n√©ration article fitness');
} 