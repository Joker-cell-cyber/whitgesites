'use client';

import { useState, useEffect, useCallback } from 'react';
import { Button } from "@/app/components/ui/button";
import { Input } from "@/app/components/ui/input";
import { Textarea } from "@/app/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/app/components/ui/select";
import Link from 'next/link';
import { motion } from 'framer-motion';
import { 
  Mail, 
  Phone, 
  Clock, 
  Send, 
  MapPin, 
  MessageSquare, 
  HelpCircle, 
  ArrowRight,
  Sparkles
} from 'lucide-react';

// Fonction pour insérer des caractères invisibles entre les caractères d'un texte
const obfuscateText = (text: string) => {
  if (typeof text !== 'string') return '';
  return text.split('').join('\u200B'); // Insertion de caractères de largeur zéro
};

export default function ContactPage() {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    subject: '',
    message: '',
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitSuccess, setSubmitSuccess] = useState(false);
  const [submitError, setSubmitError] = useState('');
  const [visibleSection, setVisibleSection] = useState<string | null>(null);

  // Informations de contact protégées - utilisez des valeurs réelles en production
  const protectedEmail = "support@neuralearns.com";
  const protectedPhone = "01 23 45 67 89";
  const protectedHours = "Lun-Ven: 9h-18h";

  // Fonction pour copier du texte dans le presse-papiers avec vérification côté client
  const copyToClipboard = useCallback((text: string) => {
    if (typeof navigator !== 'undefined' && navigator.clipboard) {
      navigator.clipboard.writeText(text)
        .catch(err => console.error('Erreur lors de la copie :', err));
    }
  }, []);

  // Handler pour éviter la copie du texte obfusqué
  const handleCopy = useCallback((e: React.ClipboardEvent, text: string) => {
    e.preventDefault();
    copyToClipboard(text);
  }, [copyToClipboard]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    setSubmitError('');
    
    try {
      const response = await fetch('/api/contact', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          name: formData.name,
          email: formData.email,
          subject: formData.subject,
          message: formData.message
        })
      });
      
      const data = await response.json();
      
      if (data.success) {
        setSubmitSuccess(true);
        setFormData({
          name: '',
          email: '',
          subject: '',
          message: '',
        });
        
        // Réinitialiser le statut après 5 secondes
        setTimeout(() => {
          setSubmitSuccess(false);
        }, 5000);
      } else {
        setSubmitError(data.message || 'Une erreur est survenue. Veuillez réessayer.');
      }
    } catch (error) {
      setSubmitError('Une erreur est survenue. Veuillez réessayer.');
      console.error('Erreur lors de l\'envoi du formulaire:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  useEffect(() => {
    // Animation pour que les éléments apparaissent séquentiellement
    const timer = setTimeout(() => {
      setVisibleSection('contact-info');
    }, 300);
    
    return () => clearTimeout(timer);
  }, []);

  // Variants pour animations Framer Motion
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: { 
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
        delayChildren: 0.2
      }
    }
  };
  
  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.5 } }
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-white to-[#F5F2FC] py-12 md:py-20 overflow-hidden">
      <div className="container mx-auto px-4 sm:px-6 relative z-10">
        {/* Éléments décoratifs */}
        <div className="absolute top-0 left-1/4 w-72 h-72 bg-[#E2D9F3]/30 rounded-full filter blur-3xl -z-10"></div>
        <div className="absolute bottom-1/4 right-1/3 w-80 h-80 bg-[#D3E9DD]/30 rounded-full filter blur-3xl -z-10"></div>
        
        <motion.div 
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          className="max-w-5xl mx-auto"
        >
          {/* En-tête */}
          <div className="text-center mb-12 md:mb-16">
            <motion.div 
              initial={{ opacity: 0, scale: 0.8 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ duration: 0.5 }}
              className="inline-block px-4 py-1.5 rounded-full bg-[#F5F2FC] text-[#A590DC] text-sm font-medium border border-[#E2D9F3] mb-4"
            >
              <span className="flex items-center">
                <MessageSquare className="w-4 h-4 mr-2" />
                Notre équipe à votre écoute
              </span>
            </motion.div>
            
            <motion.h1 
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: 0.1 }}
              className="text-3xl md:text-5xl font-bold text-[#2A303D] mb-4 relative"
            >
              <span className="relative inline-block">
                Comment pouvons-nous 
                <span className="relative">
                  <span className="relative z-10 text-[#A590DC]"> vous aider</span>
                  <svg className="absolute -bottom-2 left-0 w-full -z-0" viewBox="0 0 200 10" xmlns="http://www.w3.org/2000/svg">
                    <path d="M0,5 Q50,9 100,5 T200,5" fill="none" stroke="#E2D9F3" strokeWidth="4"/>
                  </svg>
                </span>
                ?
              </span>
            </motion.h1>
            
            <motion.p 
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: 0.2 }}
              className="text-lg text-[#6C7080] max-w-2xl mx-auto"
            >
              Notre équipe est à votre disposition pour répondre à toutes vos questions et vous accompagner dans l'utilisation de notre plateforme.
            </motion.p>
          </div>
          
          {/* Contenu principal */}
          <div className="bg-white rounded-2xl shadow-xl overflow-hidden">
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-0">
              {/* Sidebar avec informations de contact */}
              <motion.div 
                variants={containerVariants}
                initial="hidden"
                animate={visibleSection === 'contact-info' ? 'visible' : 'hidden'}
                className="bg-[#A590DC] p-8 lg:p-10 text-white lg:col-span-1 relative overflow-hidden"
              >
                <div className="absolute top-0 right-0 w-full h-full">
                  <svg width="100%" height="100%" viewBox="0 0 400 400" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <g opacity="0.1">
                      <circle cx="100" cy="100" r="80" fill="white" />
                      <circle cx="300" cy="300" r="120" fill="white" />
                      <circle cx="360" cy="40" r="40" fill="white" />
                    </g>
                  </svg>
                </div>
                
                <div className="relative z-10">
                  <motion.h2 
                    variants={itemVariants}
                    className="text-2xl font-bold mb-8 flex items-center"
                  >
                    <Sparkles className="w-6 h-6 mr-2"/>
                    Contactez-nous
                  </motion.h2>
                  
                  <div className="space-y-8">
                    <motion.div variants={itemVariants} className="flex items-start">
                      <div className="flex-shrink-0 w-10 h-10 rounded-lg bg-white/20 flex items-center justify-center mr-4">
                        <Mail className="h-5 w-5 text-white" />
                      </div>
                      <div>
                        <h3 className="text-lg font-medium mb-1">Email</h3>
                        <p 
                          className="text-white/80 select-none cursor-pointer" 
                          onClick={() => copyToClipboard(protectedEmail)}
                          onCopy={(e) => handleCopy(e, protectedEmail)}
                        >
                          {obfuscateText(protectedEmail)}
                        </p>
                        <p className="text-xs text-white/60 mt-1">(Cliquez pour copier)</p>
                      </div>
                    </motion.div>
                    
                    <motion.div variants={itemVariants} className="flex items-start">
                      <div className="flex-shrink-0 w-10 h-10 rounded-lg bg-white/20 flex items-center justify-center mr-4">
                        <Phone className="h-5 w-5 text-white" />
                      </div>
                      <div>
                        <h3 className="text-lg font-medium mb-1">Téléphone</h3>
                        <p 
                          className="text-white/80 select-none cursor-pointer" 
                          onClick={() => copyToClipboard(protectedPhone)}
                          onCopy={(e) => handleCopy(e, protectedPhone)}
                        >
                          {obfuscateText(protectedPhone)}
                        </p>
                        <p className="text-xs text-white/60 mt-1">(Cliquez pour copier)</p>
                      </div>
                    </motion.div>
                    
                    <motion.div variants={itemVariants} className="flex items-start">
                      <div className="flex-shrink-0 w-10 h-10 rounded-lg bg-white/20 flex items-center justify-center mr-4">
                        <Clock className="h-5 w-5 text-white" />
                      </div>
                      <div>
                        <h3 className="text-lg font-medium mb-1">Horaires</h3>
                        <p className="text-white/80">
                          {protectedHours}
                        </p>
                      </div>
                    </motion.div>
                    
                    <motion.div variants={itemVariants} className="flex items-start">
                      <div className="flex-shrink-0 w-10 h-10 rounded-lg bg-white/20 flex items-center justify-center mr-4">
                        <MapPin className="h-5 w-5 text-white" />
                      </div>
                      <div>
                        <h3 className="text-lg font-medium mb-1">Localisation</h3>
                        <p className="text-white/80">
                          Paris, France
                        </p>
                      </div>
                    </motion.div>
                  </div>
                  
                  <motion.div 
                    variants={itemVariants}
                    className="mt-12 pt-8 border-t border-white/20"
                  >
                    <h3 className="text-lg font-medium mb-3 flex items-center">
                      <HelpCircle className="w-5 h-5 mr-2" />
                      Questions fréquentes
                    </h3>
                    <p className="text-white/80 mb-4 text-sm">
                      Consultez notre FAQ pour trouver rapidement des réponses à vos questions.
                    </p>
                    <Link href="/#faq">
                      <Button 
                        className="w-full bg-white text-[#A590DC] hover:bg-white/90 transition-all group"
                      >
                        <span className="flex items-center">
                          Consulter la FAQ
                          <ArrowRight className="w-4 h-4 ml-2 transition-transform group-hover:translate-x-1" />
                        </span>
                      </Button>
                    </Link>
                  </motion.div>
                </div>
              </motion.div>
              
              {/* Formulaire de contact */}
              <motion.div 
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ duration: 0.6, delay: 0.3 }}
                className="p-8 lg:p-12 lg:col-span-2"
              >
                <h2 className="text-2xl font-bold text-[#2A303D] mb-8">Envoyez-nous un message</h2>
                
                <form onSubmit={handleSubmit} className="space-y-6">
                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
                    <div>
                      <label htmlFor="name" className="block text-sm font-medium text-[#6C7080] mb-2">
                        Nom complet
                      </label>
                      <Input
                        id="name"
                        name="name"
                        type="text"
                        value={formData.name}
                        onChange={handleChange}
                        required
                        className="w-full border border-[#E2D9F3] rounded-xl p-3 text-[#2A303D] focus:border-[#A590DC] focus:ring-[#A590DC]/20"
                        placeholder="Votre nom"
                      />
                    </div>
                    
                    <div>
                      <label htmlFor="email" className="block text-sm font-medium text-[#6C7080] mb-2">
                        Email
                      </label>
                      <Input
                        id="email"
                        name="email"
                        type="email"
                        value={formData.email}
                        onChange={handleChange}
                        required
                        className="w-full border border-[#E2D9F3] rounded-xl p-3 text-[#2A303D] focus:border-[#A590DC] focus:ring-[#A590DC]/20"
                        placeholder="votre@email.com"
                      />
                    </div>
                  </div>
                  
                  <div>
                    <label htmlFor="subject" className="block text-sm font-medium text-[#6C7080] mb-2">
                      Sujet
                    </label>
                    <Select
                      value={formData.subject}
                      onValueChange={(value) => setFormData(prev => ({ ...prev, subject: value }))}
                    >
                      <SelectTrigger className="w-full border border-[#E2D9F3] rounded-xl p-3 text-[#2A303D] focus:border-[#A590DC] focus:ring-[#A590DC]/20">
                        <SelectValue placeholder="Sélectionnez un sujet" />
                      </SelectTrigger>
                      <SelectContent className="border border-[#E2D9F3] rounded-xl">
                        <SelectItem value="question">Question générale</SelectItem>
                        <SelectItem value="support">Support technique</SelectItem>
                        <SelectItem value="billing">Facturation</SelectItem>
                        <SelectItem value="partnership">Partenariat</SelectItem>
                        <SelectItem value="other">Autre</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div>
                    <label htmlFor="message" className="block text-sm font-medium text-[#6C7080] mb-2">
                      Message
                    </label>
                    <Textarea
                      id="message"
                      name="message"
                      value={formData.message}
                      onChange={handleChange}
                      required
                      className="w-full border border-[#E2D9F3] rounded-xl p-3 text-[#2A303D] focus:border-[#A590DC] focus:ring-[#A590DC]/20 min-h-[150px]"
                      placeholder="Détaillez votre demande ici..."
                    />
                  </div>
                  
                  <div>
                    <Button
                      type="submit"
                      disabled={isSubmitting}
                      className="w-full bg-[#A590DC] hover:bg-[#9480CB] text-white rounded-xl p-6 h-auto transition-all shadow-md hover:shadow-lg"
                    >
                      <span className="flex items-center justify-center text-base">
                        {isSubmitting ? (
                          <>
                            <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            Envoi en cours...
                          </>
                        ) : (
                          <>
                            <Send className="mr-2 h-5 w-5" />
                            Envoyer le message
                          </>
                        )}
                      </span>
                    </Button>
                  </div>
                  
                  {submitSuccess && (
                    <motion.div 
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      className="p-5 bg-green-50 border border-green-200 rounded-xl"
                    >
                      <div className="flex">
                        <div className="flex-shrink-0">
                          <svg className="h-5 w-5 text-green-400" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                            <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z" clipRule="evenodd" />
                          </svg>
                        </div>
                        <div className="ml-3">
                          <p className="text-sm font-medium text-green-800">
                            Votre message a été envoyé avec succès ! Nous vous répondrons dans les plus brefs délais.
                          </p>
                        </div>
                      </div>
                    </motion.div>
                  )}
                  
                  {submitError && (
                    <motion.div 
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      className="p-5 bg-red-50 border border-red-200 rounded-xl"
                    >
                      <div className="flex">
                        <div className="flex-shrink-0">
                          <svg className="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                            <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.28 7.22a.75.75 0 00-1.06 1.06L8.94 10l-1.72 1.72a.75.75 0 101.06 1.06L10 11.06l1.72 1.72a.75.75 0 101.06-1.06L11.06 10l1.72-1.72a.75.75 0 00-1.06-1.06L10 8.94 8.28 7.22z" clipRule="evenodd" />
                          </svg>
                        </div>
                        <div className="ml-3">
                          <p className="text-sm font-medium text-red-800">
                            {submitError}
                          </p>
                        </div>
                      </div>
                    </motion.div>
                  )}
                </form>
              </motion.div>
            </div>
          </div>
          
          {/* Carte */}
          <motion.div 
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6, delay: 0.5 }}
            className="mt-16 bg-white rounded-2xl overflow-hidden shadow-lg"
          >
            <div className="aspect-[16/5] w-full bg-[#F5F2FC]/50 flex items-center justify-center p-8">
              <div className="text-center">
                <h3 className="text-xl font-bold text-[#2A303D] mb-4">Notre siège social</h3>
                <p className="text-[#6C7080]">Nous sommes situés au cœur de Paris, France</p>
              </div>
            </div>
          </motion.div>
        </motion.div>
      </div>
      
      {/* Style pour empêcher la sélection du texte */}
      <style jsx global>{`
        .select-none {
          -webkit-touch-callout: none;
          -webkit-user-select: none;
          -khtml-user-select: none;
          -moz-user-select: none;
          -ms-user-select: none;
          user-select: none;
        }
      `}</style>
    </div>
  );
} 